STL ===>It contains 4 components
        Algorithms
        containers
        functions
        Iterators


PAIR ====> It is a part of utility library
        .It is used to insert pair of elements.


#include<bits/stdc++.h>
using namespace std;
int main()
{   
pair<int,int>p={1,2};
cout<<p.second<<endl;
cout<<p.first<<" "<<p.second<<endl;
pair<int,pair<int,int>>s={1,{3,4}};
cout<<s.first<<endl;
cout<<s.second.first<<endl;
cout<<s.second.second<<endl;
pair<int,int>arr[]={{1,2},{3,4}};
cout<<arr[0].first<<endl;
cout<<arr[1].second<<endl;
return 0;
}






VECTOR ====> It is a dynamic array
operations :
push_back()==>it accepts a parameter and insert the element passed in the parameter in the vectors, the element is inserted at the end.
pop_back()==>it deletes the last element and returns it to the calling function.
size()==>returns the size of the vector
empty()==> to check if the vector is empty or not.
front()==> it returns a reference to the first element of the vector.
back()==>it returns a reference to the last element of the vector.
erase()==> it is used to delete a specific element
insert()==> it is used to insert an element at a specified position.
begin()==>it returns an iterator pointing to the first element of the vector.
end()==> it returns an iterator pointing to the element theoretically after the last element of the vector.
clear()==> deletes all the elements from the vector.



#include<bits/stdc++.h>
using namespace std;
int main() {
  vector < int > v;
  for (int i = 0; i < 10; i++) {
    v.push_back(i); //inserting elements in the vector
  }
   cout << "the elements in the vector: ";
  for (auto it = v.begin(); it != v.end(); it++)
    cout << * it << " ";
  cout << "\nThe front element of the vector: " << v.front();
  cout << "\nThe last element of the vector: " << v.back();
  cout << "\nThe size of the vector: " << v.size();
  cout << "\nDeleting element from the end: " << v[v.size() - 1];
  v.pop_back();
  cout << "\nPrinting the vector after removing the last element:" << endl;
  for (int i = 0; i < v.size(); i++)
    cout << v[i] << " ";
  cout << "\nInserting 5 at the beginning:" << endl;
  v.insert(v.begin(), 5);
  cout << "The first element is: " << v[0] << endl;
  cout << "Erasing the first element" << endl;
  v.erase(v.begin());
  cout << "Now the first element is: " << v[0] << endl;
  if (v.empty())
    cout << "\nvector is empty";
  else
    cout << "\nvector is not empty" << endl;
  v.clear();
  cout << "Size of the vector after clearing the vector: " << v.size();
}
