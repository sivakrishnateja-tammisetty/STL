1.STL(standard template library): is a powerful and versatile library in c++ that provides a set of reuseable data strctures and algorithms
===>It contains 3 components
        Algorithms -> It performs operations of containers.
        containers -> It is a collection of elements.
        Iterators ->It can be used for accessing stored data and address.


sequence containers : Provides linear, contiguous storage, with fast inserts at the "back" end only(list,vector,deque,forward_list,array).
Associative containers :It is a variable-sized Container that supports efficient retrieval of elements (values) based on keys(set,map,multiset,multimap).
unordered associative containers :( unordered sets, unordered multisets, unordered maps, and unordered multimaps).
conatiner adapaters: (stack,queue,priority_queue).

-------------------------------------------------------------------------------------------------------------------
2.PAIR ====> It is a part of utility library
        .It is used to insert pair of elements.


#include<bits/stdc++.h>
using namespace std;
int main()
{   
pair<int,int>p={1,2};
cout<<p.second<<endl;
cout<<p.first<<" "<<p.second<<endl;
pair<int,pair<int,int>>s={1,{3,4}};
cout<<s.first<<endl;
cout<<s.second.first<<endl;
cout<<s.second.second<<endl;
pair<int,int>arr[]={{1,2},{3,4}};
cout<<arr[0].first<<endl;
cout<<arr[1].second<<endl;
return 0;
}


-----------------------------------------------------------------------------------------------------------------

3.VECTOR ====> It is a dynamic array

OPERATIONS:
push_back()==>it accepts a parameter and insert the element passed in the parameter in the vectors, the element is inserted at the end.
pop_back()==>it deletes the last element and returns it to the calling function.
size()==>returns the size of the vector
empty()==> to check if the vector is empty or not.
front()==> it returns a reference to the first element of the vector.
back()==>it returns a reference to the last element of the vector.
erase()==> it is used to delete a specific element
insert()==> it is used to insert an element at a specified position.
begin()==>it returns an iterator pointing to the first element of the vector.
end()==> it returns an iterator pointing to the element theoretically after the last element of the vector.
clear()==> deletes all the elements from the vector.



#include<bits/stdc++.h>
using namespace std;
int main() {
  vector < int > v;
  for (int i = 0; i < 10; i++) {
    v.push_back(i); //inserting elements in the vector
  }
   cout << "the elements in the vector: ";
  for (auto it = v.begin(); it != v.end(); it++)
    cout << * it << " ";
  cout << "\nThe front element of the vector: " << v.front();
  cout << "\nThe last element of the vector: " << v.back();
  cout << "\nThe size of the vector: " << v.size();
  cout << "\nDeleting element from the end: " << v[v.size() - 1];
  v.pop_back();
  cout << "\nPrinting the vector after removing the last element:" << endl;
  for (int i = 0; i < v.size(); i++)
    cout << v[i] << " ";
  cout << "\nInserting 5 at the beginning:" << endl;
  v.insert(v.begin(), 5);
  cout << "The first element is: " << v[0] << endl;
  cout << "Erasing the first element" << endl;
  v.erase(v.begin());
  cout << "Now the first element is: " << v[0] << endl;
  if (v.empty())
    cout << "\nvector is empty";
  else
    cout << "\nvector is not empty" << endl;
  v.clear();
  cout << "Size of the vector after clearing the vector: " << v.size();
}
-----------------------------------------------------------------------------------------------------

4. LIST
.A list in STL is a contiguous container that allows the inserting and erasing of elements in constant time and iterating in both directions.
.Include header <list>
. List is same as vector, dynamic in nature.
.List maintains doubly-linkedlist internally.
.List is bi-directional.

OPERATIONS:
        .push_back() – to insert an element at the end of the list.
        .push_front() – to insert an element at the front of the list.
        .pop_back() – deletes the last element of the list.
        .pop_front() – deletes the front element of the list.
        .front() – it gives a reference to the first element of the list.
        .back() – it gives a reference to the last element of the list.
        .reverse() – reverse the list.
        .sort() – sorts the list in ascending order.
        .size() – returns the number of elements on the list.
        .empty() – to check if the list is empty or not.
        .clear() – to delete all the elements of the list.
        .begin() – it refers to the first element of the list.
        .end() – it refers to the theoretical element after the last element of the list.
        .emplace_front() – to insert an element at the front of the list.
        .emplace_back() – to insert an element at the end of the list.
        .erase() – to delete a single element or elements between a particular range.




#include<bits/stdc++.h>
using namespace std;
void printlist(list<int> li)
{
    list<int>::iterator it;
    for(it=li.begin();it!=li.end();it++)
    {
        cout<<*it<<" ";
    }
    cout<<endl;
}
int main()
{
    list<int> li;
    li.push_back(10);
    li.push_back(20);
    li.push_front(30);
    li.push_front(40);
    li.push_front(50);
    
    cout<<"The elements in the list are: ";
    printlist(li);
    cout<<"Reversing the list: ";
    li.reverse();
    printlist(li);
    cout<<"Sorting the list: ";
    li.sort();
    printlist(li);
    cout<<"The size of the list is: "<<li.size()<<endl;
    cout<<"The first element in the list: "<<li.front()<<endl;
    cout<<"Deleting the first element"<<endl;
    li.pop_front();
    printlist(li);
    cout<<"The last element of the list: "<<li.back()<<endl;
    cout<<"Deleting the last element"<<endl;
    li.pop_back();
    printlist(li);
    
}


--------------------------------------------------------------------------------------------------------------------------------------------
5. DEQUE:
        .Double Ended Queue which is also called Deque is a type of queue data structure in which the insertion and deletion of elements can be either in front or rear
 OPERATIONS:
 .push_back() – to insert an element at the end of the deque.
 .push_front() – to insert an element at the front of the deque.
 .pop_back() – deletes the last element of the deque.
 .pop_front() – deletes the front element of the deque.
 .front() – it gives a reference to the first element of the deque.
 .back() – it gives a reference to the last element of the deque.
 .size() – returns the number of elements on the deque.
 .empty() – to check if the deque is empty or not.











#include<bits/stdc++.h>
using namespace std;
void printdeque(deque<int> dq)
{
    deque<int>::iterator it;
    for(it=dq.begin();it!=dq.end();it++)
    {
        cout<<*it<<" ";
    }
    cout<<endl;
}
int main()
{
    deque<int> dq;
    dq.push_back(10);
    dq.push_back(20);
    dq.push_front(30);
    dq.push_front(40);
    dq.push_front(50);
    
    cout<<"The elements in the deque are: ";
    printdeque(dq);
    
    cout<<"The size of the deque is: "<<dq.size()<<endl;
    cout<<"The first element in the deque: "<<dq.front()<<endl;
    cout<<"Deleting the first element"<<endl;
    dq.pop_front();
    printdeque(dq);
    cout<<"The last element of the deque: "<<dq.back()<<endl;
    cout<<"Deleting the last element"<<endl;
    dq.pop_back();
    printdeque(dq);
    
}
-----------------------------------------------------------------------------------------------------------
6. STACK: It follows LIFO
OPERATIONS:
        .push()
        .pop()
        .top()
        .swap()
        .size()
        .empty()
        .emplace() – to insert an element in the stack.




#include<bits/stdc++.h>
using namespace std;
void printstack(stack<int> s1)
{
    stack<int> s2=s1;
    while(!s2.empty())
    {
        cout<<s2.top()<<"\n";
        s2.pop();
    }
}
int main()
{
    stack<int> s;
    for(int i=1;i<=5;i++)
    s.push(i);
    
    cout<<"The elements of the stack are:"<<endl;
    printstack(s);
    
    cout<<"The size of the stack: "<<s.size()<<endl;
    cout<<"The top element of the queue: "<<s.top()<<endl;
    cout<<"Pop the top element: "<<endl;
    s.pop();
    printstack(s);
}
------------------------------------------------------------------------------------------------------------------------------------------------
7.QUEUE:It follows FIFO.A queue is a linear list of elements in which deletions can take place only at one end called the front, and insertions can take place only at the end called the rear

OPERATIONS:
        .push()
        .pop()
        .top()
        .swap()
        .size()
        .empty()



#include<bits/stdc++.h>
using namespace std;
void printqueue(queue<int> q1)
{
    queue<int> q2=q1;
    while(!q2.empty())
    {
        cout<<q2.front()<<"\n";
        q2.pop();
    }
}
int main()
{
    queue<int> q;
    for(int i=1;i<=5;i++)
    q.push(i);
    
    cout<<"The elements of the queue are:"<<endl;
    printqueue(q);
    
    cout<<"The size of the queue: "<<q.size()<<endl;
    cout<<"The front element of the queue: "<<q.front()<<endl;
    cout<<"The last element of the queue: "<<q.back()<<endl;
    cout<<"Pop the front element: "<<endl;
    q.pop();
    printqueue(q);
}

--------------------------------------------------------------------------------------------------------------------------------------------
8. PRIORITY QUEUE(MAX HEAP):
        .It also know as MAX HEAP.
        .include <queue> header file.
        .operations will be done based on priority.






#include<bits/stdc++.h>
using namespace std;
void printpriorityqueue(priority_queue<int> pq)
{
    priority_queue<int> pq2=pq;
    while(!pq.empty())
    {
        cout<<pq.top()<<"\n";
        pq.pop();
    }
}
int main()
{
    priority_queue<int> pq;
    for(int i=1;i<=5;i++)
    pq.push(i);
    
    cout<<"The elements of the priority queue are:"<<endl;
    printpriorityqueue(pq);
    
    cout<<"The size of the priority queue: "<<pq.size()<<endl;
    cout<<"The top element of the priority queue: "<<pq.top()<<endl;
    cout<<"Pop the top element: "<<endl;
    pq.pop();
    printpriorityqueue(pq);
}









                              MIN HEAP

.If you want MIN element at top,then syntax will be like
        priority_queue<int,vector<int>,greater<int> objectname;
.It also know as MIN HEAP.





#include<bits/stdc++.h>
using namespace std;
void printpriorityqueue(priority_queue<int,vector<int>,greater<int>> pq)
{
    priority_queue<int,vector<int>,greater<int>> pq2=pq;
    while(!pq.empty())
    {
        cout<<pq.top()<<"\n";
        pq.pop();
    }
}
int main()
{
    priority_queue<int,vector<int>,greater<int>> pq;
    for(int i=1;i<=5;i++)
    pq.push(i);
    
    cout<<"The elements of the priority queue are:"<<endl;
    printpriorityqueue(pq);
    
    cout<<"The size of the priority queue: "<<pq.size()<<endl;
    cout<<"The top element of the priority queue: "<<pq.top()<<endl;
    cout<<"Pop the top element: "<<endl;
    pq.pop();
    printpriorityqueue(pq);
}
-------------------------------------------------------------------------------------------------------------------------------------------------
9. SET:
        .A set in STL is a container that stores unique elements in a particular order. 
        .It maintainssorted and unique
        .#include<set>

operations:
        .insert() – to insert an element in the set.
        .begin() – return an iterator pointing to the first element in the set.
        .end() – returns an iterator to the theoretical element after the last element.
        .count() – returns true or false based on whether the element is present in the set or not(1/0).
        .clear() – deletes all the elements in the set.
        .find() – to search an element in the set(it returns address if element was not present in set then it returns s.end()).
        .erase() – to delete a single element or elements between a particular range.
        .size() – returns the size of the set.
        .empty() – to check if the set is empty or not.







#include<bits/stdc++.h>

using namespace std;

int main() {
  set < int > s;
  for (int i = 1; i <= 10; i++) {
    s.insert(i);
  }

  cout << "Elements present in the set: ";
  for (auto it = s.begin(); it != s.end(); it++) {
    cout << * it << " ";
  }
  cout << endl;
  int n = 2;
 if (s.find(2) != s.end())
   cout << n << " is present in set" << endl;
   

  s.erase(s.begin());
  cout << "Elements after deleting the first element: ";
  for (auto it = s.begin(); it != s.end(); it++) {
    cout << * it << " ";
  }
  cout << endl;

  cout << "The size of the set is: " << s.size() << endl;

  if (s.empty() == false)
    cout << "The set is not empty " << endl;
  else
    cout << "The set is empty" << endl;
  s.clear();
  cout << "Size of the set after clearing all the elements: " << s.size();
}
------------------------------------------------------------------------------------------------------------------------------------------
10. MULTI-SET:
        .A multiset in STL is an associative container just like a set the only difference is it can store duplicate elements in it.
         .Include #include<set>
        .same as set,but it obey only sort and not unique.






#include<bits/stdc++.h>

using namespace std;

int main() {
  multiset < int > s;
  for (int i = 1; i <= 10; i++) {
    s.insert(i);
  }
  s.insert(5);
  cout << "Elements present in the multiset: ";
  for (auto it = s.begin(); it != s.end(); it++) {
    cout << * it << " ";
  }
  cout << endl;
  int n = 2;
  if (s.find(2) != s.end())
    cout << n << " is present in multiset" << endl;

  s.erase(s.begin());
  cout << "Elements after deleting the first element: ";
  for (auto it = s.begin(); it != s.end(); it++) {
    cout << * it << " ";
  }
  cout << endl;

  cout << "The size of the multiset is: " << s.size() << endl;

  if (s.empty() == false)
    cout << "The multiset is not empty " << endl;
  else
    cout << "The multiset is empty" << endl;
  s.clear();
  cout << "Size of the multiset after clearing all the elements: " << s.size();
}

------------------------------------------------------------------------------------------------------------------------------------------------

11. UNORDERED SET:
 .#include<set>
        .Everything is same as set,but it doesn't maintain sorted,but it maintains unique elements



----------------------------------------------------------------------------------------------------------------------------------------------------
12. MAP:

        .#include<map>
        .It allows unique keys and duplicate values.
        .It maintains unique keys in sorted order,something similar to set.



ways to store keys&values in map:
-------------------------------
1st way: map<int,int>mp;
        mp[key]=value; (or) mp.insert({key,value}) (or) mp.emplace({key,value})

2nd way: map<pair<int,int>,int>mp;
        mp[{key,key}]=value;



operations:
        insert() – to insert an element in the map.
        begin() – return an iterator pointing to the first element in the map.
        end() – returns an iterator to the theoretical element after the last element.
        clear() – deletes all the elements in the map
        find() – to search for an element in the map.
        erase() – to delete a single element or elements between a particular range.
        size() – returns the number of elements on the map.
         empty() – to check if the map is empty or not.








#include<bits/stdc++.h>

using namespace std;

int main() {
  map < int, int > mp;
  for (int i = 1; i <= 5; i++) {
    mp.insert({i , i * 10});
  }

  cout << "Elements present in the map: " << endl;
  cout << "Key\tElement" << endl;
  for (auto it = mp.begin(); it != mp.end(); it++) {
    cout << it -> first << "\t" << it -> second << endl;
  }

  int n = 2;
  if (mp.find(2) != mp.end())
    cout << n << " is present in map" << endl;

  mp.erase(mp.begin());
  cout << "Elements after deleting the first element: " << endl;
  cout << "Key\tElement" << endl;
  for (auto it = mp.begin(); it != mp.end(); it++) {
    cout << it -> first << "\t" << it -> second << endl;
  }

  cout << "The size of the map is: " << mp.size() << endl;

  if (mp.empty() == false)
    cout << "The map is not empty " << endl;
  else
    cout << "The map is empty" << endl;
  mp.clear();
  cout << "Size of the map after clearing all the elements: " << mp.size();
}
        
-----------------------------------------------------------------------------------------------------------------------------
13. MULTI-MAP:
        .#include<map>
        .It is similar to map, but it stores duplicate keys also.
        .only map[key] was not used here.



---------------------------------------------------------------------------------------------------------------------------------
14. UNORDERD-MAP:
        .#include<unordered_map>
        .unorderd map has only unique keys,but not in sorted keys.


---------------------------------------------------------------------------------------------------------------------------

15. SORT:
        .instead of sorting algorithms,just sort() is required.
        .Include #include<algorithm> header file is required




Syntax:
The sort() function in STL accepts two mandatory parameters: begin, and end, and sorts the range with-in the container in ascending order by default.

sort(begin, end)




Example 1:

int arr[] = {4,2,1}

sort(arr, arr+3);

Output: arr[] = {1,2,4}
Example 2:

vector<int> vec = {4,2,1}

sort(vec.begin(), vec.end());

Output: vec = {1,2,4}






Can we also sort a container in descending order using sort()?


 #include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

int main() {
    
    int arr[] = {4,2,1};

    sort(arr, arr+3, greater<int>());
    
    cout<<arr[0]<<" "<<arr[1]<<" "<<arr[2];
    
    return 0;
}

-----------------------------------------------------------------------------------------------------------------------------------------
16. __builtin_popcount():

        .These function returns no.of set bits (or) how many 1's are there for a given binary format.




#include<iostream>
#include<algorithm>

using namespace std;

int main() {
    
    int n = 7;
    
    cout<<__builtin_popcount(n);
    
    return 0;
}

--------------------------------------------------------------------------------------------------------------------------------------
17. next_permutation:
        . next_permutation() accepts two iterators (begin and end) of a container(example, an array or vector ) as parameters and modifies the container to store the next lexicographically greater permutation of elements within the range [begin, end)


        .syntax:   next_permutation(begin, end);




#include<iostream>
#include<algorithm>

using namespace std;

int main() {
    
    string s="123";
    do{
        cout<<s<<endl;
    }
    while(next_permutation(s.begin(),s.end()));
    
    return 0;
}



---------------------------------------------------------------------------------------------------------------------------------------------------
18. max_element() :
                        .To find the maximum element of the vector. 
                         syntax: *max_element(first index,last index);




#include<bits/stdc++.h>
using namespace std;
int main(){
    vector<int>v {4,2,5,9,1};
    cout<<"The elements in the vector are: ";
    for(int i=0;i<v.size();i++)
    {
        cout<<v[i]<<" ";
    }
    cout<<endl;
    cout<<"The maximum element is: "<<*max_element(v.begin(),v.end());
}
-----------------------------------------------------------------------------------------------------------------
19. min_element():
        .To find minimum element of a vector.

       syntax:*max_element(first index,last index);


#include<bits/stdc++.h>
using namespace std;
int main(){
    vector<int>v {4,2,5,9,1};
    cout<<"The elements in the vector are: ";
    for(int i=0;i<v.size();i++)
    {
        cout<<v[i]<<" ";
    }
    cout<<endl;
    cout<<"The maximum element is: "<<*max_element(v.begin(),v.end());
}




------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
20. finding minmax element at a time  using minmax_element():


Eg:
#include <bits/stdc++.h>
using namespace std;
int main()
{
    int a[]={11,1,22,3,4};
    auto s=minmax_element(begin(a),end(a));
    cout<<*s.first<<" "<<*s.second;
    return 0;
}

o/p:
1 22
